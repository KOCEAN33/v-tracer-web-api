// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  handle    String?  @unique
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authToken AuthToken?
  review    Review[]
  question  Question[]
  proCon    ProCon[]
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  accessToken  String   @db.String
  refreshToken String   @db.String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  ownerId   String?  @db.ObjectId
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alternativeReviews Review[] @relation("AlternativeReviews")
  switchedReviews    Review[] @relation("switchedReviews")
  review             Review[]
  proCon             ProCon[]
}

model Review {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  productId       String   @db.ObjectId
  authorId        String   @db.ObjectId
  title           String
  body            String
  alternativeId   String[] @db.ObjectId
  alternativeBody String?
  switchedId      String[] @db.ObjectId
  switchedBody    String?

  alternative Product  @relation("AlternativeReviews", fields: [alternativeId], references: [id], onDelete: Cascade)
  switched    Product  @relation("switchedReviews", fields: [switchedId], references: [id], onDelete: Cascade)
  Product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model ProCon {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String @db.ObjectId
  productId String @db.ObjectId

  user    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Question {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
