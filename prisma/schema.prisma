// generator client {//   provider = "prisma-client-js"// }generator kysely {  provider     = "prisma-kysely"  output       = "../src/@types"  fileName     = "types.ts"  enumFileName = "enums.ts"}datasource db {  provider     = "mysql"  url          = env("DATABASE_URL")  relationMode = "prisma"}model User {  id         Int     @id @default(autoincrement())  email      String  @unique  isVerified Boolean @default(false) @map("is_verified")  createdAt DateTime @default(now()) @map("created_at")  // user  profile Profile?  // auth  password      Password?  refreshTokens RefreshToken[]  verifyCodes   VerifyCode[]  // contents  posts       Post[]  comments    Comment[]  SocialLogin SocialLogin?  @@index([email])  @@map("users")}model Profile {  id       Int     @id @default(autoincrement())  name     String  imageUrl String? @map("image_url") @db.Text  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @unique @map("user_id")  updatedAt DateTime @updatedAt @map("updated_at")  @@index([userId])  @@map("profiles")}model SocialLogin {  id           Int    @id @default(autoincrement())  provider     String  externalId   String @unique @map("external_id")  email        String  firstName    String @map("first_name")  lastName     String @map("last_name")  picture      String @db.Text  accessToken  String @map("access_token") @db.Text  refreshToken String @map("refresh_token") @db.Text  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @unique @map("user_id")  @@index([externalId])  @@index([userId])  @@map("social_logins")}model Password {  id       Int    @id @default(autoincrement())  password String @db.Text  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @unique @map("user_id")  updatedAt DateTime @updatedAt @map("updated_at")  @@index([userId])  @@map("passwords")}model RefreshToken {  id           Int      @id @default(autoincrement())  refreshToken String   @map("refresh_token")  isActivate   Boolean  @default(false) @map("is_activate")  ip           String  userAgent    String?  @map("user_agent")  expiresIn    DateTime @map("expires_in")  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @map("user_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  @@index([userId])  @@map("refresh_tokens")}enum VerifyType {  new_account}model VerifyCode {  id         Int        @id @default(autoincrement())  type       VerifyType  code       String     @unique @db.VarChar(12)  expiresIn  DateTime   @map("expires_in")  isActivate Boolean    @default(false) @map("is_activate")  user   User @relation(fields: [userId], references: [id])  userId Int  @map("user_id")  verifiedAt DateTime? @map("verified_at")  createdAt  DateTime  @default(now()) @map("created_at")  @@index([code])  @@index([userId])  @@map("verify_codes")}enum PostStatus {  draft  published  hide}enum PostType {  review  question}model Post {  id          Int        @id @default(autoincrement())  title       String  body        String     @db.Text  type        PostType  status      PostStatus @default(value: draft)  publishedAt DateTime?  @map("published_at")  isDeleted   Boolean    @default(false) @map("is_deleted")  user      User    @relation(fields: [authorId], references: [id])  authorId  Int     @map("author_id")  product   Product @relation(fields: [productId], references: [id])  productId Int     @map("product_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  comments Comment[]  @@index([authorId])  @@index([productId])  @@map("posts")}model Comment {  id        Int     @id @default(autoincrement())  body      String  @db.Text  isDeleted Boolean @default(false) @map("is_deleted")  post     Post @relation(fields: [postId], references: [id])  postId   Int  @map("post_id")  user     User @relation(fields: [authorId], references: [id])  authorId Int  @map("author_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  @@index([postId])  @@index([authorId])  @@map("comments")}model Product {  id     Int     @id @default(autoincrement())  handle String  @unique  name   String  url    String?  company   Company? @relation(fields: [companyId], references: [id])  companyId Int?     @map("company_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  posts Post[]  @@index([handle])  @@index([companyId])  @@map("products")}model Company {  id   Int    @id @default(autoincrement())  name String  url  String  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  products Product[]  @@map("companies")}