// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  Unverified
  Activated
  Dormancy
  Deleted
}

model User {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String     @unique
  password String
  status   UserStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authToken   AuthToken[]
  review      Review[]
  question    Question[]
  verifyToken VerifyToken[]
}

type UserAgent {
  IP          String
  OS          String
  browser     String
  fingerprint String
}

model AuthToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  refreshToken String    @unique @db.String
  creationUA   UserAgent
  latestUA     UserAgent

  expiresIn DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  handle    String   @unique
  name      String
  url       String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review   Review[]
  question Question[]
}

model Company {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
}

enum ArticleStatus {
  Draft
  Published
  Deleted
}

model Review {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.ObjectId
  title     String
  body      String
  status    ArticleStatus @default(value: Draft)

  publishedAt DateTime?
  deletedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.ObjectId
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String        @db.ObjectId
  title     String
  body      String
  status    ArticleStatus @default(value: Draft)

  publishedAt DateTime?
  deletedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model ProCon {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   user      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   authorId  String  @db.ObjectId
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String  @db.ObjectId
//
//   deletedAt DateTime?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model (not yet)
// alternative     Product?  @relation("alternativeReviews", fields: [alternativeId], references: [id], onDelete: Cascade)
// alternativeId   String[]  @db.ObjectId
// alternativeBody String?
// switched        Product?  @relation("switchedReviews", fields: [switchedId], references: [id], onDelete: Cascade)
// switchedId      String[]  @db.ObjectId
// switchedBody    String?

enum VerifyType {
  NewAccount
  DeleteAccount
  ChangePassword
}

model VerifyToken {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  type   VerifyType
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String     @db.ObjectId
  email  String?
  token  String

  isVerifiable Boolean  @default(false)
  expiresIn    DateTime

  verifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
