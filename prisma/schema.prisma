generator kysely {  provider     = "prisma-kysely"  output       = "../src/@types"  fileName     = "types.ts"  enumFileName = "enums.ts"}generator dbml {  provider = "prisma-dbml-generator"}datasource db {  provider     = "mysql"  url          = env("DATABASE_URL")  relationMode = "foreignKeys"}model User {  id         Int     @id @default(autoincrement())  email      String  @unique  isVerified Boolean @default(false) @map("is_verified")  createdAt DateTime @default(now()) @map("created_at")  // user  profile Profile?  // auth  password      Password?  refreshTokens RefreshToken[]  verifyCodes   VerifyCode[]  // contents  SocialLogin SocialLogin?  @@index([email])  @@map("users")}model Profile {  id       Int     @id @default(autoincrement())  name     String  imageUrl String? @map("image_url") @db.Text  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @unique @map("user_id")  updatedAt DateTime @updatedAt @map("updated_at")  @@map("profiles")}model SocialLogin {  id          Int    @id @default(autoincrement())  provider    String  externalId  String @unique @map("external_id")  email       String  name        String  picture     String @db.Text  accessToken String @map("access_token") @db.Text  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @unique @map("user_id")  @@index([externalId])  @@map("social_logins")}model Password {  id       Int    @id @default(autoincrement())  password String @db.Text  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @unique @map("user_id")  updatedAt DateTime @updatedAt @map("updated_at")  @@map("passwords")}model RefreshToken {  id           Int      @id @default(autoincrement())  refreshToken String   @map("refresh_token")  isActivate   Boolean  @default(false) @map("is_activate")  ip           String  userAgent    String?  @map("user_agent")  expiresIn    DateTime @map("expires_in")  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)  userId Int  @map("user_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  @@map("refresh_tokens")}enum VerifyType {  new_account}model VerifyCode {  id         Int        @id @default(autoincrement())  type       VerifyType  code       String     @unique @db.VarChar(12)  expiresIn  DateTime   @map("expires_in")  isActivate Boolean    @default(false) @map("is_activate")  user   User @relation(fields: [userId], references: [id])  userId Int  @map("user_id")  verifiedAt DateTime? @map("verified_at")  createdAt  DateTime  @default(now()) @map("created_at")  @@index([code])  @@map("verify_codes")}model Company {  id   Int    @id @default(autoincrement())  name String  url  String  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  vtubers Vtuber[]  @@map("companies")}enum VtuberStatus {  new  active}model Vtuber {  id   Int    @id @default(autoincrement())  name String  company   Company? @relation(fields: [companyId], references: [id])  companyId Int?     @map("company_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  stream  Stream[]  youtube Youtube[]  @@index([companyId])  @@map("vtubers")}enum YoutubeStatus {  new  activated  disabled}model Youtube {  id          Int           @id @default(autoincrement())  status      YoutubeStatus  url         String  name        String?  handle      String?  channelId   String?       @unique @map("channel_id")  image       String?  description String?  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  crawledAt DateTime @map("crawled_at")  vtuber   Vtuber @relation(fields: [vtuberId], references: [id])  vtuberId Int    @map("vtuber_id")  stream Stream[]  @@map("youtubes")}enum StreamType {  game  singing  talking  etc}model Stream {  id       Int         @id @default(autoincrement())  type     StreamType?  name     String  url      String  duration String?  streamId String @unique  vtuber   Vtuber @relation(fields: [vtuberId], references: [id])  vtuberId Int    @map("vtuber_id")  game   Game? @relation(fields: [gameId], references: [id])  gameId Int?  @map("game_id")  youtube   Youtube? @relation(fields: [youtubeId], references: [id])  youtubeId Int?     @map("youtube_id")  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  @@index([gameId])  @@index([streamId])  @@index([vtuberId])  @@map("streams")}// 게임 정보 스키마model Game {  id    Int     @id @default(autoincrement())  name  String  url   String?  image String?  createdAt DateTime @default(now()) @map("created_at")  updatedAt DateTime @updatedAt @map("updated_at")  Streams  Stream[]  keywords GameKeyword[]  @@map("games")}model GameKeyword {  id   Int    @id @default(autoincrement())  word String  game   Game @relation(fields: [gameId], references: [id])  gameId Int  @map("game_id")  @@map("game_keywords")}