generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/@types"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  is_verified Boolean @default(false)

  created_at DateTime @default(now())

  // user
  profile Profile?

  // auth
  password      Password?
  refreshTokens RefreshToken[]
  verifyCodes   VerifyCode[]

  // contents
  posts    Post[]
  comments Comment[]

  @@index([email])
  @@map("users")
}

model Profile {
  id        Int     @id @default(autoincrement())
  name      String
  image_url String? @db.Text

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int  @unique

  updated_at DateTime @updatedAt

  @@index([user_id])
  @@map("profiles")
}

model Password {
  id       Int    @id @default(autoincrement())
  password String @db.Text

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int  @unique

  updated_at DateTime @updatedAt

  @@index([user_id])
  @@map("passwords")
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  refresh_token String   @unique
  is_activate   Boolean  @default(false)
  ip            String
  user_agent    String?
  expires_in    DateTime

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@map("refresh_tokens")
}

enum VerifyType {
  new_account
}

model VerifyCode {
  id          Int        @id @default(autoincrement())
  type        VerifyType
  code        String
  expires_in  DateTime
  is_activate Boolean    @default(false)

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  verified_at DateTime?
  created_at  DateTime  @default(now())

  @@index([code])
  @@index([user_id])
  @@map("verify_codes")
}

enum PostStatus {
  draft
  published
  hide
}

enum PostType {
  review
  question
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String
  body         String     @db.Text
  type         PostType
  status       PostStatus @default(value: draft)
  published_at DateTime?
  is_deleted   Boolean    @default(false)

  user       User    @relation(fields: [author_id], references: [id])
  author_id  Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  comments Comment[]

  @@index([author_id])
  @@index([product_id])
  @@map("posts")
}

model Comment {
  id      Int     @id @default(autoincrement())
  body    String  @db.Text
  deleted Boolean @default(false)

  post      Post @relation(fields: [post_id], references: [id])
  post_id   Int
  user      User @relation(fields: [author_id], references: [id])
  author_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([post_id])
  @@index([author_id])
  @@map("comments")
}

model Product {
  id     Int     @id @default(autoincrement())
  handle String  @unique
  name   String
  url    String?

  company    Company? @relation(fields: [company_id], references: [id])
  company_id Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post[]

  @@index([handle])
  @@index([company_id])
  @@map("products")
}

model Company {
  id   Int    @id @default(autoincrement())
  name String
  url  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]

  @@map("companies")
}
