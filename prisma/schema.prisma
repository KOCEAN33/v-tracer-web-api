// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String  @unique
  password   String
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authToken   AuthToken[]
  review      Review[]
  question    Question[]
  proCon      ProCon[]
  verifyEmail VerifyEmailToken[]
}

model AuthToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  fingerprint  String
  refreshToken String   @unique @db.String
  ip           String
  os           String
  expiresIn    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  handle    String   @unique
  name      String
  url       String?
  language  String[]
  price     Price[]
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?  @db.ObjectId
  ownerId   String?  @db.ObjectId

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  alternativeReviews Review[] @relation("alternativeReviews")
  switchedReviews    Review[] @relation("switchedReviews")
  review             Review[]
  proCon             ProCon[]
}

type Price {
  period String
}

model Company {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Review {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String    @db.ObjectId
  user            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String    @db.ObjectId
  title           String
  body            String
  alternative     Product?  @relation("alternativeReviews", fields: [alternativeId], references: [id], onDelete: Cascade)
  alternativeId   String[]  @db.ObjectId
  alternativeBody String?
  switched        Product?  @relation("switchedReviews", fields: [switchedId], references: [id], onDelete: Cascade)
  switchedId      String[]  @db.ObjectId
  switchedBody    String?
  // Boolean 형 추가 
  publishedAt     DateTime?
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProCon {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Question {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId
  title    String
  body     String

  publishedAt DateTime?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum VerifyEmailType {
  NEWACCOUNT
  DELETEACCOUNT
  CHANGEPASSWORD
}

model VerifyEmailToken {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  type   VerifyEmailType
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String          @db.ObjectId
  email  String
  token  String

  isExpired  Boolean   @default(false)
  expiresIn  DateTime
  isVerified Boolean   @default(false)
  verifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
