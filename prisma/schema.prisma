generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/database"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  verified Boolean @default(false)

  createdAt DateTime @default(now())

  // user
  profile Profile?

  // auth
  password      Password?
  refreshTokens RefreshToken[]
  verifyCodes   VerifyCode[]

  // contents
  posts    Post[]
  comments Comment[]

  @@index([email])
}

model Profile {
  id       Int     @id @default(autoincrement())
  name     String
  imageUrl String? @db.Text

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Password {
  id       Int    @id @default(autoincrement())
  password String @db.Text

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  updatedAt DateTime @updatedAt

  @@index([userId])
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  activate     Boolean  @default(false)
  ip           String
  userAgent    String?
  fingerprint  String
  expiresIn    DateTime

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum VerifyType {
  NEWACCOUNT
}

model VerifyCode {
  id         Int        @id @default(autoincrement())
  type       VerifyType
  code       String
  activate   Boolean    @default(false)
  changeData String?
  expiresIn  DateTime

  user   User @relation(fields: [userId], references: [id])
  userId Int

  verifiedAt DateTime?
  createdAt  DateTime  @default(now())

  @@index([code])
  @@index([userId])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum PostType {
  REVIEW
  QUESTION
  HIDE
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String     @db.Text
  type        PostType
  status      PostStatus @default(value: DRAFT)
  publishedAt DateTime?
  deleted     Boolean    @default(false)

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  user      User    @relation(fields: [authorId], references: [id])
  authorId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  @@index([authorId])
  @@index([productId])
}

model Comment {
  id      Int     @id @default(autoincrement())
  body    String  @db.Text
  deleted Boolean @default(false)

  post     Post @relation(fields: [postId], references: [id])
  postId   Int
  user     User @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Product {
  id     Int     @id @default(autoincrement())
  handle String  @unique
  name   String
  url    String?

  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@index([handle])
  @@index([companyId])
}

model Company {
  id   Int    @id @default(autoincrement())
  name String
  url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}
